openapi: 3.0.0
info:
  title: Company API
  version: '1.0'
  description: |-
    All Resources in this context are assigned to a company. Each company has a unique companySlug that always needs to be passed as the first path parameter. For example the Slug for Dr. Klein Privatkunden AG is "drklein", so the path to list all employees of drklein would be:

    https://api.drklein-plattform.de/drklein/v1/employees

    # Cooperation

    A cooperation represents two agents working together. It is created from a cooperation contract that can be created in the platform via
    Eine Kooperation bezeichnet die Zusammenarbeit zwischen zwei Partnern. Ein Partner ist ein Mitarbeiter an einem Standort. Sie entstehen aus Kooperationsverträgen, die in der Plattform über die Weboberfläche angelegt und gepflegt werden können.
    Über diese Schnittstelle können u.a. die aktuellen Kooperationen eines Partners abgefragt werden.

    # Agents

    Agents are employees of a company that offers services for customers in an office. These services can include realtor services or finance consulting.
    Agents receive leads and manage their customers. Additionally they can manage their cases in the platform and also external systems like Europace.
  contact:
    name: Timo Lange
    email: das-produkt@drklein.de
  termsOfService: Terms of Service
servers:
  - url: 'https://api.drklein-plattform.de/{companySlug}'
    description: PROD
  - url: 'https://api.staging.drklein-plattform.de/{companySlug}'
    description: STAGING
paths:
  '/v1/agents/{agentId}/partner-agents':
    parameters:
      - schema:
          type: string
        name: agentId
        in: path
        required: true
    get:
      summary: Find all partner agents
      responses: {}
      operationId: get-v1-agents-agentId-partner-agents
      description: Show all agents that are cooperating with this agent
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/agents.v1.yaml
      tags:
        - Agents
  /v1/agents:
    get:
      summary: Find all agents
      tags:
        - Agents
      responses: {}
      operationId: get-v1-agents
      description: Displays all agents
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/agents.v1.yaml
    post:
      summary: Create a new Agent
      operationId: post-v1-agents
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/agent.v1.yaml
          headers:
            LOCATION:
              schema:
                type: string
              description: Link to the created agent
      description: An agent can be created with an existing employee and an existing office
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                employeeId:
                  type: string
                  maxLength: 36
                officeId:
                  type: string
                  maxLength: 36
                externalId:
                  type: string
              required:
                - employeeId
                - officeId
            examples:
              example-1: {}
        description: ''
      tags:
        - Agents
  /v1/cooperations:
    get:
      summary: Get Cooperations
      tags:
        - Cooperations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/cooperations.v1.yaml
      operationId: get-cooperations
      description: A cooperation is an agreement between two agents that want to work together
      parameters:
        - schema:
            type: string
          in: query
          name: contractingPartnerId
          description: 'if this parameter is set, only cooperations where any partner has this id are shown'
        - schema:
            type: string
          in: query
          name: contractingPartnerExternalId
    parameters: []
  /v1/company-cooperation-contracts:
    get:
      summary: Get Company Cooperation Contracts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/company-cooperation-contracts.v1.yaml
      operationId: get-v1-company-cooperation-contracts
      description: 'To enable agents of two companies to cooperate, the companies that these agents work for need to have a companyCooperationContract'
      tags:
        - Company
    post:
      summary: Create a Company Cooperation Contract
      operationId: post-v1-company-cooperation-contracts
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/company-cooperation-contract.v1.yaml
          headers:
            LOCATION:
              schema:
                type: string
              description: Link to the created CompanyCooperationContract
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                creatingCompanyId:
                  type: string
                  maxLength: 36
                  description: the currently authenticated user needs to belong to this company and this company will be allowed to delete the contract
                contractingCompanyId:
                  type: string
                  maxLength: 36
                  description: "this company won't be able to delete the contract but it needs to sign it otherwise the contract stays invalid"
              required:
                - creatingCompanyId
                - contractingCompanyId
      tags:
        - Company
  '/v1/agents/{agentId}':
    parameters:
      - schema:
          type: string
        name: agentId
        in: path
        required: true
    get:
      summary: Get an agent
      tags:
        - Agents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/agent.v1.yaml
      operationId: get-v1-agents-agentId
      description: Returns one agent
  /v1/offices:
    get:
      summary: Get offices
      tags:
        - Offices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/offices.v1.yaml
      operationId: get-v1-offices
      description: ''
    post:
      summary: Create a new office
      operationId: post-v1-offices
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/office.v1.yaml
          headers:
            LOCATION:
              schema:
                type: string
              description: Link to the created office
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                  minLength: 1
                externalId:
                  type: string
                  maxLength: 255
              required:
                - name
        description: ''
      tags:
        - Offices
  /v1/employees:
    get:
      summary: Get employees
      tags:
        - Employees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/employees.v1.yaml
      operationId: get-v1-employees
    post:
      summary: Create an employee
      operationId: post-v1-employees
      responses:
        '202':
          description: Accepted
          headers:
            LOCATION:
              schema:
                type: string
              description: Task-resource that can be polled until employee was created
              required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  maxLength: 255
                firstName:
                  type: string
                  maxLength: 255
                lastName:
                  type: string
                  maxLength: 255
                externalId:
                  type: string
              required:
                - email
        description: ''
      description: 'An employee is created asynchronous. After POSTing to this endpoint, a LOCATION-header to a task-resource will be returned that can be polled and will return a link to the employee once it was created'
      tags:
        - Employees
  '/v1/companies/{companyId}':
    parameters:
      - schema:
          type: string
        name: companyId
        in: path
        required: true
        description: id of the company
    get:
      summary: Get company by Id
      tags:
        - Company
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/company.v1.yaml
      operationId: get-v1-companies-companyId
      description: Get a single company by id
  '/v1/offices/{officeId}':
    parameters:
      - schema:
          type: string
        name: officeId
        in: path
        description: The id of the office
        required: true
    get:
      summary: Get a single office
      tags:
        - Offices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/office.v1.yaml
      operationId: get-v1-offices-officeId
      description: ''
    put:
      summary: Update an office
      operationId: put-v1-offices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/office.v1.yaml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                externalId:
                  type: string
                  maxLength: 255
              required:
                - name
      tags:
        - Offices
    delete:
      summary: Delete an office
      operationId: delete-v1-offices-officeId
      responses:
        '204':
          description: No Content
      description: Delete an office
      tags:
        - Offices
    patch:
      summary: Patch an office
      operationId: patch-v1-offices-officeId
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                externalId:
                  type: string
      tags:
        - Offices
  '/v1/employees/{employeeId}':
    parameters:
      - schema:
          type: string
        name: employeeId
        in: path
        required: true
        description: id of the employee
    get:
      summary: Get an employee
      tags:
        - Employees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/employee.v1.yaml
      operationId: get-v1-employees-employeeId
      description: Get a single employee by id
      parameters:
        - schema:
            type: string
            maxLength: ''
          in: query
          name: email
          description: filter by the email-address of the employee
    delete:
      summary: Delete an employee
      operationId: delete-v1-employees-employeeId
      responses:
        '204':
          description: No Content
      tags:
        - Employees
  '/v1/employees/tasks/{taskId}':
    parameters:
      - schema:
          type: string
        name: taskId
        in: path
        required: true
    get:
      summary: Get employeeTask status
      tags:
        - Employees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'status of the employee-creation '
                    enum:
                      - PENDING
                      - COMPLETED
                  message:
                    type: string
                    description: human-readable explanation of the current status
                    maxLength: 255
                  id:
                    type: string
                    maxLength: 36
                required:
                  - status
                  - message
                  - id
        '303':
          description: See Other
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'status of the employee-creation '
                    enum:
                      - PROCESSING
                      - COMPLETED
                  message:
                    type: string
                    description: human-readable explanation of the current status
                    maxLength: 255
                required:
                  - status
                  - message
          headers:
            LOCATION:
              schema:
                type: string
              description: Link to the created employee
      operationId: get-v1-employees-tasks-taskId
  '/v1/company-cooperation-contracts/{contractId}':
    parameters:
      - schema:
          type: string
        name: contractId
        in: path
        required: true
    get:
      summary: Get a Company Cooperation Contract
      tags:
        - Company
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/company-cooperation-contract.v1.yaml
      operationId: get-v1-company-cooperation-contracts-contractId
    delete:
      summary: Delete a Company Cooperation Contract
      operationId: delete-v1-company-cooperation-contracts-contractId
      responses:
        '204':
          description: No Content
      tags:
        - Company
  /v1/customer-reviews:
    get:
      summary: Get a customer review
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/customer-reviews.v1.yaml
      operationId: get-v1-agent-reviews
      description: Get all reviews of this company
    post:
      summary: Create a customer review
      operationId: post-v1-agent-reviews
      responses:
        '202':
          description: Accepted
          headers:
            LOCATION:
              schema:
                type: string
              description: Link to the review that will be created
      tags:
        - agentReview
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                customerFirstName:
                  type: string
                  maxLength: 255
                customerLastName:
                  type: string
                  maxLength: 255
                customerPlaceOfResidence:
                  type: string
                  maxLength: 255
                createdAt:
                  type: string
                  description: ''
                externalId:
                  type: string
                  maxLength: 255
                rating:
                  type: number
                reviewText:
                  type: string
                productGroupId:
                  type: string
                  maxLength: 36
                recomendation:
                  type: boolean
                  description: true if this customer would recommend the services
                consultingOccured:
                  type: boolean
                  description: true if the customer was consulted by an agent before giving the review
                employeeId:
                  type: string
                  maxLength: 36
                  description: if the review references a certain employee it can be linked with this field
                authorEmail:
                  type: string
                  maxLength: 255
                authorExternalId:
                  type: string
                  maxLength: 255
                publiclyVisible:
                  type:
                    - string
                    - boolean
                  maxLength: 255
                  description: 'if this is set to true, it is be possible to view this review without being authenticated (e.g. to display it on a website) '
        description: ''
      description: Create a new review for this company
    parameters: []
  '/v1/customer-reviews/{reviewId}':
    parameters:
      - schema:
          type: string
        name: reviewId
        in: path
        required: true
    get:
      summary: Get a customer review
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/agent-review.v1.yaml
      operationId: get-v1-agent-reviews-reviewId
      description: Get a single customerReview by its id
components:
  schemas: {}
  securitySchemes:
    Dr.Klein Plattform ID Service:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: ''
          refreshUrl: ''
          scopes: {}
      description: Alle Aufrufe der Public Api benötigen einen gültigen OAuth Token vom ID Service der Dr.Klein Plattform.
